// Luke Underwood
// 9/28/2020
// Project_4 for CS311
// counthsw.h
// header file for countHSW_recurse and supporting functions

#ifndef COUNTHSW_H
#define COUNTHSW_H

#include <vector>

// define the type that will be used for the board
using Board_Type = std::vector<std::vector<int>>;

// countHSW function
// counts the number of possible holey spider walks on a given board
// a board has a hole and a finish
// every spot must be visited except the hole, which must not be
// parameters are x and y values of the board size, hole, start, and finish
// in that order each passed as two ints
// PRECONDITIONS : ***ALL*** parameters must be nonegative integers
//                 The x coordinates of the hole, start, and finish must be < dim_x
//                 The y coordinates of the hole, start, and finish must be < dim_y
//                 As a result of the previous three assertions, dim_x and dim_y must be > 0
// does not throw if preconditions are met
int countHSW(const int& dim_x, const int& dim_y,
             const int& hole_x, const int& hole_y,
             const int& start_x, const int& start_y,
             const int& finish_x, const int& finish_y);

// createBoard function
// creates a board on which a holey spider walk might take place
// a board has a hole and a finish
// a board is represented by a 2-D vector of int
// the hole, the outer border, and any visited spaces are represented by 1's
// so that if a space = 1, it is not a valid place to move
// the finish is represented by a 2 so that it can be checked for easily
// without passing around extra parameters
// PRECONDITIONS : ***ALL*** parameters must be nonegative integers
//                 The x coordinates of the hole and finish must be < dim_x
//                 The y coordinates of the hole and finish must be < dim_y
//                 As a result of the previous three assertions, dim_x and dim_y must be > 0
// does not throw if preconditions are met
Board_Type createBoard(const int& dim_x, const int& dim_y, 
                       const int& hole_x, const int& hole_y,
                       const int& finish_x, const int& finish_y);

// countHSW_recurse function
// IT IS NOT RECOMMENDED TO CALL THIS FUNCTION EXCEPT VIA countHSW()
// IT IS RECOMMENDED THAT PARAMETER board BE GENERATED BY createBoard()
// recursive function that counts the number of holey spider walks given
// a board with a partial solution on it and the coordinates of the current position
// if it is a complete solution, a 1 will be returned
// if it is a partial solution that has reached a dead end, or the finish without 
// first visiting every other square, a 0 will be returned
// otherwise, (a) recursive call(s) will be made, using recursive backtracking to find
// the total number of possible HSW's
// PRECONDITIONS : The given board must have: a border of 1's around the outer edge
//                                            0's representing unvisited spaces
//                                            1's representing the hole and visited spaces
//                                            a 2 representing the finish
//                 0 < current_x < board.size() - 1
//                 0 < current_y < board[0].size() - 1, board[1].size() - 1, etc.
// does not throw if preconditions are met
int countHSW_recurse(Board_Type& board,
                     const int& current_x, const int& current_y);

// isComplete function
// returns true if complete, false if not, given a board
// conditions for completion are that there be no 0's left on the board
// PRECONDITIONS : board must follow standard board formatting laid out in comments above
//                 if it does not, this function may return something unuseful
// does not throw if preconditions are met
bool isComplete(const Board_Type& board);

#endif // #ifndef COUNTHSW_H